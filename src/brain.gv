digraph { { rank=min; g0s0 }
 subgraph {
  g0 [color=gray,fillcolor=lightgray,label="G0",shape=box];
  g0 -> g0s0 [color=gray];
  g0s0 -> g0s0 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g0s0 -> g0s1 [label="./ 3
self.output = list('§'); self.y = self.output.pop(0); self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g0s0 -> g0s0 [label="else/  3
self.words[-1] += x"];
  g0s1 -> g0s1 [label=" / 3 self.output
self.y = self.output.pop(0)"];
  g0s1 -> g0s2 [label=" /. 3 not self.output"];
  g0s1 -> g0s2 [label="else/  3
self.words[-1] += x"];
  g0s2 -> g0s2 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g0s2 -> g0s0 [label=";/  3
self.words = ['']"];
  g0s2 -> g0s2 [label="else/  3
self.words[-1] += x"];
 }
 subgraph {
  g2 [color=gray,fillcolor=lightgray,label="G2
0 -> 4
1 -> 5
2 -> 0
3 -> 3
4 -> 6
5 -> 2
6 -> 7
7 -> 9
9 -> 8",shape=box];
  g2 -> g2s0 [color=gray];
  g2s0 -> g2s0 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g2s0 -> g2s0 [label="else/  0
self.words[-1] += x"];
  g2s0 -> g2s1 [label="./ 3 len(self.words) >= 1
self.output = list(self.mapping.get(' '.join(self.words[:1]), '§')); self.y = self.output.pop(0); self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g2s1 -> g2s1 [label=" / 3 self.output
self.y = self.output.pop(0)"];
  g2s1 -> g2s2 [label=" /. 3 not self.output"];
  g2s1 -> g2s2 [label="else/  0
self.words[-1] += x"];
  g2s2 -> g2s2 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g2s2 -> g2s2 [label="else/  3
self.words[-1] += x"];
  g2s2 -> g2s0 [label=";/  0 (len(self.words) >= 2) and (' '.join(self.words[:1]) not in self.mapping or self.mapping[' '.join(self.words[:1])] == ' '.join(self.words[1:]))
self.mapping[' '.join(self.words[:1])] = ' '.join(self.words[1:]); self.words = ['']"];
 }
 subgraph {
  g1 [color=gray,fillcolor=lightgray,label="G1
0 -> 3
1 -> 2
2 -> 8
3 -> 9
4 -> 7
5 -> 1
6 -> 4
7 -> 6
8 -> 0
9 -> 5",shape=box];
  g1 -> g1s0 [color=gray];
  g1s0 -> g1s0 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g1s0 -> g1s0 [label="else/  0
self.words[-1] += x"];
  g1s0 -> g1s1 [label="./ 3 (len(self.words) >= 1) and (' '.join(self.words[:1]) in self.mapping)
self.output = list(self.mapping.get(' '.join(self.words[:1]), '§')); self.y = self.output.pop(0); self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g1s1 -> g1s1 [label=" / 3 self.output
self.y = self.output.pop(0)"];
  g1s1 -> g1s2 [label=" /. 3 not self.output"];
  g1s1 -> g1s2 [label="else/  0
self.words[-1] += x"];
  g1s2 -> g1s2 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g1s2 -> g1s2 [label="else/  3
self.words[-1] += x"];
  g1s2 -> g1s0 [label=";/  0 (len(self.words) >= 2) and (' '.join(self.words[:1]) not in self.mapping or self.mapping[' '.join(self.words[:1])] == ' '.join(self.words[1:]))
self.mapping[' '.join(self.words[:1])] = ' '.join(self.words[1:]); self.words = ['']"];
 }
 g2 -> g1 [color=lightgray,label="-2",style=dashed];
 subgraph {
  g3 [color=gray,fillcolor=lightgray,label="G3
0 -> 3
2 -> 4
3 -> 6
4 -> 0
5 -> 2
6 -> 7
7 -> 1
8 -> 9
9 -> 8",shape=box];
  g3 -> g3s0 [color=gray];
  g3s0 -> g3s0 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g3s0 -> g3s0 [label="else/  0
self.words[-1] += x"];
  g3s0 -> g3s1 [label="./ 3 (len(self.words) >= 1) and (' '.join(self.words[:1]) in self.mapping)
self.output = list(self.mapping.get(' '.join(self.words[:1]), '§')); self.y = self.output.pop(0); self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g3s1 -> g3s1 [label=" / 3 self.output
self.y = self.output.pop(0)"];
  g3s1 -> g3s2 [label=" /. 3 not self.output"];
  g3s1 -> g3s2 [label="else/  0
self.words[-1] += x"];
  g3s2 -> g3s2 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g3s2 -> g3s2 [label="else/  3
self.words[-1] += x"];
  g3s2 -> g3s0 [label=";/  0 (len(self.words) >= 2) and (' '.join(self.words[:1]) not in self.mapping or self.mapping[' '.join(self.words[:1])] == ' '.join(self.words[1:]))
self.mapping[' '.join(self.words[:1])] = ' '.join(self.words[1:]); self.words = ['']"];
 }
 g2 -> g3 [color=lightgray,label="-1",style=dashed];
 subgraph {
  g4 [color=gray,fillcolor=lightgray,label="G4
0 -> 4
1 -> 5
2 -> 0
3 -> 3
4 -> 6
5 -> 2
6 -> 7
7 -> 9
9 -> 8",shape=box];
  g4 -> g4s0 [color=gray];
  g4s0 -> g4s0 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g4s0 -> g4s0 [label="else/  0
self.words[-1] += x"];
  g4s0 -> g4s1 [label="./ 3 (len(self.words) >= 1) and (' '.join(self.words[:1]) in self.mapping)
self.output = list(self.mapping.get(' '.join(self.words[:1]), '§')); self.y = self.output.pop(0); self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g4s1 -> g4s1 [label=" / 3 self.output
self.y = self.output.pop(0)"];
  g4s1 -> g4s2 [label=" /. 3 not self.output"];
  g4s1 -> g4s2 [label="else/  0
self.words[-1] += x"];
  g4s2 -> g4s2 [label=" /  3
self.words[len(self.words):len(self.words)] = [''] if self.words[-1] else []"];
  g4s2 -> g4s2 [label="else/  3
self.words[-1] += x"];
  g4s2 -> g4s0 [label=";/  0 (len(self.words) >= 2) and (' '.join(self.words[:1]) not in self.mapping or self.mapping[' '.join(self.words[:1])] == ' '.join(self.words[1:]))
self.mapping[' '.join(self.words[:1])] = ' '.join(self.words[1:]); self.words = ['']"];
 }
 g2 -> g4 [color=lightgray,label="0",style=dashed];
{ rank=same; g1 g3 g4}
 g0 -> g2 [color=lightgray,label="24",style=dashed];
{ rank=same; g2}
}
